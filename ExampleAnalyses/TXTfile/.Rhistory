setwd('..')
setwd('ExampleAnalyses/TXTfilenew/')
setwd('HerbicideSettings')
setwd('..')
require(RGtk2)
require(RGtk2Extras)
require(plyr)
require(data.table)
require(reshape2)
require(ggplot2)
require(ggthemes)
require(svglite)
require(vegan)
require(foreach)
require(doParallel)
load(file = "HerbicideSettings/SimulationSettings.Rdata")
variables <- ls(IBCvariables)
variables <- variables[!(variables %in% c("origFiles", "origWD", "GUIopen", "PFTtoSpecies"))]
dfSettings <- data.frame()
for(variable in variables){
value <- as.character(get(variable, envir=IBCvariables))
if(length(value)==0) value <- NA
rowtoadd <- data.frame(variable, value)
colnames(rowtoadd) <- c("variable", "value")
dfSettings <-rbind(dfSettings, rowtoadd)
}
store <- rGtkDataFrame(dfSettings)
view <- gtkTreeView(store)
nms <- names(dfSettings)
QT <- sapply(1:ncol(dfSettings), function(i) {
type <- class(dfSettings[,i])[1]
view$addColumnWithType(name = nms[i], type, viewCol = i, storeCol = i)
})
cb_settings <- gtkButton("Close Window")
destroy_settingW <- function(button){
settingW$destroy()
}
gSignalConnect(cb_settings, signal = "clicked", destroy_settingW)
settingW <- gtkWindow(show=F)
color <-gdkColorToString('white')
settingW$ModifyBg("normal", color)
Settings <- gtkScrolledWindow()
Settings$add(view)
vbox<-gtkVBoxNew(spacing=10)
vbox$packStart(Settings)
vbox$packStart(cb_settings)
settingW$add(vbox)
settingW$show()
load(file = "HerbicideSettings/SimulationSettings.Rdata")
variables <- ls(SaveEnvironment)
variables <- variables[!(variables %in% c("origFiles", "origWD", "GUIopen", "PFTtoSpecies"))]
dfSettings <- data.frame()
for(variable in variables){
value <- as.character(get(variable, envir=IBCvariables))
if(length(value)==0) value <- NA
rowtoadd <- data.frame(variable, value)
colnames(rowtoadd) <- c("variable", "value")
dfSettings <-rbind(dfSettings, rowtoadd)
}
store <- rGtkDataFrame(dfSettings)
view <- gtkTreeView(store)
nms <- names(dfSettings)
QT <- sapply(1:ncol(dfSettings), function(i) {
type <- class(dfSettings[,i])[1]
view$addColumnWithType(name = nms[i], type, viewCol = i, storeCol = i)
})
cb_settings <- gtkButton("Close Window")
destroy_settingW <- function(button){
settingW$destroy()
}
gSignalConnect(cb_settings, signal = "clicked", destroy_settingW)
settingW <- gtkWindow(show=F)
color <-gdkColorToString('white')
settingW$ModifyBg("normal", color)
Settings <- gtkScrolledWindow()
Settings$add(view)
vbox<-gtkVBoxNew(spacing=10)
vbox$packStart(Settings)
vbox$packStart(cb_settings)
settingW$add(vbox)
settingW$show()
load(file = "HerbicideSettings/SimulationSettings.Rdata")
variables <- ls(SaveEnvironment)
variables <- variables[!(variables %in% c("origFiles", "origWD", "GUIopen", "PFTtoSpecies"))]
dfSettings <- data.frame()
for(variable in variables){
value <- as.character(get(variable, envir=SaveEnvironment))
if(length(value)==0) value <- NA
rowtoadd <- data.frame(variable, value)
colnames(rowtoadd) <- c("variable", "value")
dfSettings <-rbind(dfSettings, rowtoadd)
}
store <- rGtkDataFrame(dfSettings)
view <- gtkTreeView(store)
nms <- names(dfSettings)
QT <- sapply(1:ncol(dfSettings), function(i) {
type <- class(dfSettings[,i])[1]
view$addColumnWithType(name = nms[i], type, viewCol = i, storeCol = i)
})
cb_settings <- gtkButton("Close Window")
destroy_settingW <- function(button){
settingW$destroy()
}
gSignalConnect(cb_settings, signal = "clicked", destroy_settingW)
settingW <- gtkWindow(show=F)
color <-gdkColorToString('white')
settingW$ModifyBg("normal", color)
Settings <- gtkScrolledWindow()
Settings$add(view)
vbox<-gtkVBoxNew(spacing=10)
vbox$packStart(Settings)
vbox$packStart(cb_settings)
settingW$add(vbox)
settingW$show()
###################################################
### chunk number 3: AddColumnWithType
###################################################
#line 58 "ex-RGtk2-rGtkDataFrame.Rnw"
gtkTreeViewAddColumnWithType <-
function(view,
name="",
type=c("character","factor", "integer"),
viewCol,                     # 1-based column of view
storeCol                     # 1-based column for rGtkDataFrame
) {
type = match.arg(type)
## define the cell renderer
cr <- #switch(type,
gtkCellRendererText()#, #if not factor --> only Text
#             "factor" = gtkCellRendererCombo() # if type=factor --> add a combo box
#)
## the new column we will add
vc <- gtkTreeViewColumn()
vc$packStart(cr, TRUE)
vc$setTitle(name)
vc$setResizable(TRUE); vc$setClickable(TRUE)
view$InsertColumn(vc, viewCol - 1)  # viewCol is 1-based
## add attributes
switch(type,
"logical" =  vc$addAttribute(cr, "active",storeCol - 1), # only if logical
vc$addAttribute(cr, "text",storeCol - 1) # everything else
)
if(type == "numeric") cr['xalign'] <- 1 # only if numeric
## set editable/activatable property
switch(type,
"logical" = cr["activatable"] <- TRUE, # only if logical
cr["editable"] <- TRUE) # everything else
# if(type == "factor") {              # combo box needs a data store
#   cstore <- gtkListStore("gchararray")
#   rGtkstore <- view$getModel()
#   vals <- rGtkstore[,storeCol, drop=TRUE]
#
#   for(i in as.character(unique(vals))) {
#     iter <- cstore$append()
#     cstore$setValue(iter$iter,column=0, i)
#   }
#   cr['model'] <- cstore
#   cr['text-column'] <- 0
#
#   newValue <- i
#   rGtkstore[,storeCol] <- newValue
#
# }
## connect callback to edited/toggled signal
QT <- gSignalConnect(cr, signal =
if(type != "logical") "edited" else "toggled",
f = editCallBack,
data = list(view=view,type=type,column=storeCol))
}
###################################################
### chunk number 2: callBackEdit
###################################################
#line 17 "ex-RGtk2-rGtkDataFrame.Rnw"
editCallBack <- function(cell, path, arg3, ...) {
if(nargs() == 3) {
userData <- arg3; newValue <- NA    # no newValue (toggle)
} else {
newValue <- arg3; userData = ..1    # ..1 is first component of ...
}
rGtkStore <- userData$view$getModel()
i <- as.numeric(path) + 1
j <- userData$column
newValue <- try(switch(userData$type,
"integer" = as.integer(as.numeric(newValue)),
"character" = as.character(newValue),
"numeric" = as.numeric(newValue),
"factor"  = as.character(newValue),
"logical" =  !as.logical(rGtkStore[i,j])),
silent=TRUE)
if(inherits(newValue,"try-error")) {
sprintf("Failed to coerce new value to type %s",userData$type)
return(FALSE)
}
# if(userData$type == "factor") {
#   curLevels <- levels(rGtkStore[,j])
#   if(! newValue %in% curLevels) {
#     cat(gettext("Can't add level to a factor."))
#     return(FALSE)
#   }
# }
rGtkStore[i,j] <- newValue            # assign value
return(FALSE)
}
load(file = "HerbicideSettings/SimulationSettings.Rdata")
variables <- ls(SaveEnvironment)
variables <- variables[!(variables %in% c("origFiles", "origWD", "GUIopen", "PFTtoSpecies"))]
dfSettings <- data.frame()
for(variable in variables){
value <- as.character(get(variable, envir=SaveEnvironment))
if(length(value)==0) value <- NA
rowtoadd <- data.frame(variable, value)
colnames(rowtoadd) <- c("variable", "value")
dfSettings <-rbind(dfSettings, rowtoadd)
}
store <- rGtkDataFrame(dfSettings)
view <- gtkTreeView(store)
nms <- names(dfSettings)
QT <- sapply(1:ncol(dfSettings), function(i) {
type <- class(dfSettings[,i])[1]
view$addColumnWithType(name = nms[i], type, viewCol = i, storeCol = i)
})
cb_settings <- gtkButton("Close Window")
destroy_settingW <- function(button){
settingW$destroy()
}
gSignalConnect(cb_settings, signal = "clicked", destroy_settingW)
settingW <- gtkWindow(show=F)
color <-gdkColorToString('white')
settingW$ModifyBg("normal", color)
Settings <- gtkScrolledWindow()
Settings$add(view)
vbox<-gtkVBoxNew(spacing=10)
vbox$packStart(Settings)
vbox$packStart(cb_settings)
settingW$add(vbox)
settingW$show()
load(file = "HerbicideSettings/SimulationSettings.Rdata")
variables <- ls(SaveEnvironment)
variables <- variables[!(variables %in% c("origFiles", "origWD", "GUIopen", "PFTtoSpecies"))]
dfSettings <- data.frame()
for(variable in variables){
value <- as.character(get(variable, envir=SaveEnvironment))
if(length(value)==0) value <- NA
rowtoadd <- data.frame(variable, value)
colnames(rowtoadd) <- c("variable", "value")
dfSettings <-rbind(dfSettings, rowtoadd)
}
store <- rGtkDataFrame(dfSettings)
view <- gtkTreeView(store)
nms <- names(dfSettings)
QT <- sapply(1:ncol(dfSettings), function(i) {
type <- class(dfSettings[,i])[1]
view$addColumnWithType(name = nms[i], type, viewCol = i, storeCol = i)
})
cb_settings <- gtkButton("Close Window")
destroy_settingW <- function(button){
settingW$destroy()
}
gSignalConnect(cb_settings, signal = "clicked", destroy_settingW)
settingW <- gtkWindow(show=F)
color <-gdkColorToString('white')
settingW$ModifyBg("normal", color)
Settings <- gtkScrolledWindow()
Settings['height.request'] <- 300
Settings$setPolicy("automatic","automatic")
Settings$add(view)
vbox<-gtkVBoxNew(spacing=10)
vbox$packStart(Settings)
vbox$packStart(cb_settings)
settingW$add(vbox)
settingW$show()
settingW <- gtkWindow(show=F)
color <-gdkColorToString('white')
settingW$ModifyBg("normal", color)
Settings <- gtkScrolledWindow()
Settings['height.request'] <- 400
Settings['width.request'] <- 200
Settings$setPolicy("automatic","automatic")
Settings$add(view)
vbox<-gtkVBoxNew(spacing=10)
vbox$packStart(Settings)
vbox$packStart(cb_settings)
settingW$add(vbox)
settingW$show()
load(file = "HerbicideSettings/SimulationSettings.Rdata")
variables <- ls(SaveEnvironment)
variables <- variables[!(variables %in% c("origFiles", "origWD", "GUIopen", "PFTtoSpecies"))]
dfSettings <- data.frame()
for(variable in variables){
value <- as.character(get(variable, envir=SaveEnvironment))
if(length(value)==0) value <- NA
rowtoadd <- data.frame(variable, value)
colnames(rowtoadd) <- c("variable", "value")
dfSettings <-rbind(dfSettings, rowtoadd)
}
store <- rGtkDataFrame(dfSettings)
view <- gtkTreeView(store)
nms <- names(dfSettings)
QT <- sapply(1:ncol(dfSettings), function(i) {
type <- class(dfSettings[,i])[1]
view$addColumnWithType(name = nms[i], type, viewCol = i, storeCol = i)
})
cb_settings <- gtkButton("Close Window")
destroy_settingW <- function(button){
settingW$destroy()
}
gSignalConnect(cb_settings, signal = "clicked", destroy_settingW)
settingW <- gtkWindow(show=F)
color <-gdkColorToString('white')
settingW$ModifyBg("normal", color)
Settings <- gtkScrolledWindow()
Settings['height.request'] <- 400
Settings['width.request'] <- 200
Settings$setPolicy("automatic","automatic")
Settings$add(view)
vbox<-gtkVBoxNew(spacing=10)
vbox$packStart(Settings)
vbox$packStart(cb_settings)
settingW$add(vbox)
settingW$show()
